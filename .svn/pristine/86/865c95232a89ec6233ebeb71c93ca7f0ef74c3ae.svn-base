exit
c
@employee_data
c
date_wise_data
@employee_data
@emp_data
exit
reload!
tot_data4.compact.sum
tot_data4
tot_data3.compact.sum
tot_data3
tot_data2
tot_data2.compact.sum
tot_data1
tot_data1.compact.sum
exit
c
data1
c
data1
c
data1
exit
time_sht
c
time_sht
c
time_sht
c
time_sht
time_sht.pluck(:attendance_log)
c
time_sht.pluck(:attendance_log)
time_sht
c
emp[1].class == "String"
emp[1].class == String
emp[1].class
emp[1]
c
emp[1]
c
emp[1]
c
project[1]c
project[1][1]
project[1]
project[0]
project
exit
aa.count
aa = dates.each_slice(dates.count/2).to_a
dates.each_slice(dates.count/2).to_a
dates.each_slice(2).to_a
dates.each_slice(2)
dates
exit
@over_all.first
@over_all
exit
@over_all.first.first
@over_all.first
@over_all
continue
@over_all
continue
c
@project_data
c
project_data
project_date
exit
c
dates = (Date.yesterday.beginning_of_month..Date.yesterday.end_of_month).to_a
dates = (Date.yesterday.beginning_of_month..Date.yesterday.end_of_month).to_a.inject(&to_date)
dates = (Date.yesterday.beginning_of_month..Date.yesterday.end_of_month).to_a..inject(&:to_date)
dates = (Date.yesterday.beginning_of_month..Date.yesterday.end_of_month).to_a
dates
c
ss.to_date
ss="2018-01-03"
@to_date.to_date
@to_date.to_dDate
@to_date.to_Date
@to_date
@from_date
params
exit
c
params
c
@project_reports
params
exit
all_employees-employee_ids
employee_ids = TimeSheet.where(date: Date.today-1).pluck(:employee_id).uniq
employee_ids = TimeSheet.where(date: Date.today-1).pluck(:employee_id)
employee_ids
all_employees
c
TimeSheet.where(date: @dates, employee_id: params["employee_id"]).update(
c
params
exit
c
params
c
params
c
params
c
qry
time_sheet
c
data
project
c
project
c
time_sheet
c
time_sheet
c
attendance_log = TimeSheet.where(date: params[:date], employee_id: params[:employee_id])
attendance_log = TimeSheet.where(date: params[:date], employee_id: params[:employee_id]).pluck(:attendance_log).uniq
c
params["from_date"]
@project_reports
params
c
@employee_reports[1].to_date.strftime('%d-%m-%Y')
@employee_reports[1].to_date
@employee_reports[1]
exit
emp_hours
c
data
c
data
c
data
c
data
c
data
c
data
c
data
c
data
c
data
c
data
c
data
c
data
exit
c
days2
days1
exit
days.count.odd?
arr = (aar[1]<<aar[2]).flatten
arr = aar[1]<<aar[2].flatten
arr = aar[1]<<arr[2].flatten
arr=[]
arr = aar[1]<<arr[2].flatten
aar = days.each_slice(days.count/2).to_a
days.each_slice(days.count/2).to_a
days.each_slice(days.count/2).to_a[1]<<days.each_slice(days.count/2).to_a[2].flatten
days.each_slice(days.count/2).to_a[1]<<days.each_slice(days.count/2).to_a[2]
days.each_slice(days.count/2).to_a.count == 3
days.each_slice(days.count/2).to_a.count
days.each_slice(days.count/2).to_a
days.count
days.count\
c
days.each_slice(days.count/2).to_a
days.each_slice(days.count).to_a
days.each_slice(2).to_a
days.each_slice(2)
days
days.slice(2)
days.splice(2)
days.split(2)
days
c
@dates = (Date.today.beginning_of_week-(params[:period].to_i.week)-1..Date.today.end_of_week-(params[:period].to_i).week-1)
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
over_all<< status
over_all.merge(status)
over_all
status
c
over_all.merge({over_all_approval_status: over_all_approval_status})
over_all.merge(over_all_approval_status: over_all_approval_status)
over_all
over_all_approval_status
c
over_all
c
over_all
c
over_all
c
over_all
c
over_all
c
over_all
c
Date.today.strftime('%A')
Date.today.strftime('%W')
Date.today.strftime('%w')
Date.today.strftime('%d')
Date.today.strftime('%D')
Date.today.strftime('%b')
Date.today.strftime('%B')
Date.today
Date.today.day
Date.today.wday
dat
over_all
c
over_all
c
over_all
c
over_all
c
over_all
c
exit
c
@dates.map{|i| i }
